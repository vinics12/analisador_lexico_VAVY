/* The following code was generated by JFlex 1.6.1 */

package br.com.analisador_lexico_compiladores;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/vini/Documents/DEV/workspaceCompiladores/analisador_lexico/src/br/com/analisador_lexico_compiladores/language.lex</tt>
 */
class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\56\1\56\1\2\22\0\1\2\1\51\1\17"+
    "\3\0\1\50\1\16\1\44\1\45\1\12\1\10\1\53\1\11\1\15"+
    "\1\13\1\14\11\1\1\0\1\43\1\54\1\52\1\55\2\0\32\7"+
    "\1\46\1\0\1\47\1\0\1\6\1\0\1\30\1\7\1\25\1\23"+
    "\1\24\1\7\1\40\1\7\1\20\2\7\1\32\1\34\1\21\1\35"+
    "\1\37\1\27\1\36\1\26\1\22\1\31\1\33\4\7\1\41\1\3"+
    "\1\42\7\0\1\56\u1fa2\0\1\56\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\2\3\1\7\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\1\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\5\0\1\32"+
    "\3\0\10\6\1\33\1\34\1\35\1\36\1\37\2\0"+
    "\1\40\1\41\1\42\1\43\1\44\1\6\1\45\1\46"+
    "\2\6\1\0\1\47\1\50\3\6\1\51\1\6\1\52"+
    "\1\6\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\57\0\215\0\57\0\57\0\274"+
    "\0\353\0\u011a\0\57\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\u037d\0\u03ac"+
    "\0\u03db\0\57\0\u040a\0\u0439\0\u01a7\0\274\0\57\0\57"+
    "\0\u0468\0\u0178\0\u0497\0\u04c6\0\u04f5\0\57\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\57\0\57\0\57\0\57\0\57\0\u0729\0\u0758"+
    "\0\57\0\57\0\274\0\274\0\274\0\u0787\0\274\0\u07b6"+
    "\0\u07e5\0\u0814\0\u0843\0\57\0\274\0\u0872\0\u08a1\0\u08d0"+
    "\0\274\0\u08ff\0\274\0\u092e\0\274";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\10\1\22\2\10\1\23\1\10\1\24\2\10\1\25"+
    "\1\26\2\10\1\27\1\10\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\61\0\1\3\12\0\1\3\1\45\42\0\1\10"+
    "\1\0\1\46\2\0\2\10\4\0\1\10\3\0\21\10"+
    "\17\0\1\10\1\0\1\10\2\0\2\10\4\0\1\10"+
    "\3\0\21\10\26\0\1\47\57\0\1\50\57\0\1\51"+
    "\45\0\1\52\12\0\1\52\1\45\42\0\1\45\12\0"+
    "\1\45\43\0\1\53\1\54\1\55\2\54\1\0\1\53"+
    "\4\0\1\53\1\0\1\56\1\0\21\53\17\0\1\57"+
    "\1\60\1\61\2\60\1\0\1\57\4\0\1\57\2\0"+
    "\1\56\21\57\17\0\1\10\1\0\1\10\2\0\2\10"+
    "\4\0\1\10\3\0\1\10\1\62\17\10\17\0\1\10"+
    "\1\0\1\10\2\0\2\10\4\0\1\10\3\0\4\10"+
    "\1\63\14\10\17\0\1\10\1\0\1\10\2\0\2\10"+
    "\4\0\1\10\3\0\4\10\1\64\14\10\17\0\1\10"+
    "\1\0\1\10\2\0\2\10\4\0\1\10\3\0\7\10"+
    "\1\65\2\10\1\66\6\10\17\0\1\10\1\0\1\10"+
    "\2\0\2\10\4\0\1\10\3\0\10\10\1\67\10\10"+
    "\17\0\1\10\1\0\1\10\2\0\2\10\4\0\1\10"+
    "\3\0\15\10\1\70\3\10\17\0\1\10\1\0\1\10"+
    "\2\0\2\10\4\0\1\10\3\0\4\10\1\71\14\10"+
    "\66\0\1\72\60\0\1\73\56\0\1\74\56\0\1\75"+
    "\56\0\1\76\4\0\12\77\1\100\44\77\16\0\1\101"+
    "\42\0\4\54\10\0\1\56\42\0\4\54\10\0\1\101"+
    "\41\0\1\57\1\0\1\57\3\0\1\57\4\0\1\57"+
    "\2\0\1\102\21\57\20\0\4\60\11\0\1\56\40\0"+
    "\1\57\1\60\1\61\2\60\1\0\1\57\4\0\1\57"+
    "\2\0\1\102\21\57\17\0\1\10\1\0\1\10\2\0"+
    "\2\10\4\0\1\10\3\0\2\10\1\103\16\10\17\0"+
    "\1\10\1\0\1\10\2\0\2\10\4\0\1\10\3\0"+
    "\5\10\1\104\13\10\17\0\1\10\1\0\1\10\2\0"+
    "\2\10\4\0\1\10\3\0\7\10\1\105\11\10\17\0"+
    "\1\10\1\0\1\10\2\0\2\10\4\0\1\10\3\0"+
    "\11\10\1\106\7\10\17\0\1\10\1\0\1\10\2\0"+
    "\2\10\4\0\1\10\3\0\1\107\20\10\17\0\1\10"+
    "\1\0\1\10\2\0\2\10\4\0\1\10\3\0\1\110"+
    "\20\10\17\0\1\10\1\0\1\10\2\0\2\10\4\0"+
    "\1\10\3\0\6\10\1\111\12\10\17\0\1\10\1\0"+
    "\1\10\2\0\2\10\4\0\1\10\3\0\20\10\1\112"+
    "\16\0\12\77\1\113\44\77\13\0\1\114\44\0\1\10"+
    "\1\0\1\10\2\0\2\10\4\0\1\10\3\0\1\115"+
    "\20\10\17\0\1\10\1\0\1\10\2\0\2\10\4\0"+
    "\1\10\3\0\6\10\1\116\12\10\17\0\1\10\1\0"+
    "\1\10\2\0\2\10\4\0\1\10\3\0\2\10\1\117"+
    "\16\10\17\0\1\10\1\0\1\10\2\0\2\10\4\0"+
    "\1\10\3\0\10\10\1\120\10\10\16\0\12\77\1\113"+
    "\1\114\43\77\1\0\1\10\1\0\1\10\2\0\2\10"+
    "\4\0\1\10\3\0\4\10\1\121\14\10\17\0\1\10"+
    "\1\0\1\10\2\0\2\10\4\0\1\10\3\0\16\10"+
    "\1\122\2\10\17\0\1\10\1\0\1\10\2\0\2\10"+
    "\4\0\1\10\3\0\16\10\1\123\2\10\17\0\1\10"+
    "\1\0\1\10\2\0\2\10\4\0\1\10\3\0\10\10"+
    "\1\124\10\10\17\0\1\10\1\0\1\10\2\0\2\10"+
    "\4\0\1\10\3\0\16\10\1\125\2\10\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2397];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\14\1\7\11\3\1\1\11\4\1\2\11\5\0\1\11"+
    "\3\0\10\1\5\11\2\0\2\11\10\1\1\0\1\11"+
    "\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void printToken(String description, String lexeme) {
		System.out.println(lexeme + " - \t" + description);
}
private void printNewLine(String description){
	System.out.println("\\n" +" - \t" + description);
}
private void printTAB(String description){
	System.out.println("\\t" +" - \t" + description);
}
private void unknownCharacter(String description){
	System.out.println(description);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { unknownCharacter("Unknown character " + yytext());
            }
          case 44: break;
          case 2: 
            { printToken("Integer number ", yytext());
            }
          case 45: break;
          case 3: 
            { printToken("Blank space ", yytext());
            }
          case 46: break;
          case 4: 
            { printNewLine("New line scape");
            }
          case 47: break;
          case 5: 
            { printTAB("Tabulation scape");
            }
          case 48: break;
          case 6: 
            { printToken("Identificator ", yytext());
            }
          case 49: break;
          case 7: 
            { printToken("Sum operator ", yytext());
            }
          case 50: break;
          case 8: 
            { printToken("Subtraction operator ", yytext());
            }
          case 51: break;
          case 9: 
            { printToken("Multiplication operator ", yytext());
            }
          case 52: break;
          case 10: 
            { printToken("Division operator", yytext());
            }
          case 53: break;
          case 11: 
            { printToken("block start ", yytext());
            }
          case 54: break;
          case 12: 
            { printToken("Block end ", yytext());
            }
          case 55: break;
          case 13: 
            { printToken("End of instruction", yytext());
            }
          case 56: break;
          case 14: 
            { printToken("Open parentheses ", yytext());
            }
          case 57: break;
          case 15: 
            { printToken("Close parentheses ", yytext());
            }
          case 58: break;
          case 16: 
            { printToken("Open bracket ", yytext());
            }
          case 59: break;
          case 17: 
            { printToken("Close bracket ", yytext());
            }
          case 60: break;
          case 18: 
            { printToken("Attribution operator ", yytext());
            }
          case 61: break;
          case 19: 
            { printToken("Concatenation operator ", yytext());
            }
          case 62: break;
          case 20: 
            { printToken("Less than operator ", yytext());
            }
          case 63: break;
          case 21: 
            { printToken("Greater than operator ", yytext());
            }
          case 64: break;
          case 22: 
            { printToken("Float number ",yytext());
            }
          case 65: break;
          case 23: 
            { printToken("OR operator ", yytext());
            }
          case 66: break;
          case 24: 
            { printToken("Increment operator ", yytext());
            }
          case 67: break;
          case 25: 
            { printToken("Decrement operator ", yytext());
            }
          case 68: break;
          case 26: 
            { printToken("Empty string ", yytext());
            }
          case 69: break;
          case 27: 
            { printToken("AND operator ", yytext());
            }
          case 70: break;
          case 28: 
            { printToken("Not equal operator", yytext());
            }
          case 71: break;
          case 29: 
            { printToken("Equal to operator ", yytext());
            }
          case 72: break;
          case 30: 
            { printToken("Less than or equal to operator ", yytext());
            }
          case 73: break;
          case 31: 
            { printToken("Greater than or equal to operator ", yytext());
            }
          case 74: break;
          case 32: 
            { printToken("Character ", yytext());
            }
          case 75: break;
          case 33: 
            { printToken("String ", yytext());
            }
          case 76: break;
          case 34: 
            { printToken("Reserved word interger ", yytext());
            }
          case 77: break;
          case 35: 
            { printToken("Reserved word float ", yytext());
            }
          case 78: break;
          case 36: 
            { printToken("Reserved word string ", yytext());
            }
          case 79: break;
          case 37: 
            { printToken("Reserved word else ", yytext());
            }
          case 80: break;
          case 38: 
            { printToken("Reserved word for ", yytext());
            }
          case 81: break;
          case 39: 
            { printToken("Comment ", yytext());
            }
          case 82: break;
          case 40: 
            { printToken("Reserved word if ", yytext());
            }
          case 83: break;
          case 41: 
            { printToken("Reserved word while ", yytext());
            }
          case 84: break;
          case 42: 
            { printToken("Input function ", yytext());
            }
          case 85: break;
          case 43: 
            { printToken("Output function ", yytext());
            }
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
